#!/usr/bin/env python3
"""
Usage::
    ./rpcd [<port>]
"""
from aiorpcx import timeout_after, connect_rs
from urllib import parse
from os import environ
from sanic import Sanic
from sanic.views import HTTPMethodView
from sanic.response import json as sanic_json
from sanic_cors import CORS, cross_origin
import json
import re


API_ID = 'ElectrumX REST API'
RPC_HOST = environ.get('REST_RPC_HOST', 'localhost')
RPC_PORT = int(environ.get('REST_RPC_PORT', 50001))
SERVER_PORT = int(environ.get('REST_SERVER_PORT', 50005))
print ('Electrum REST API using rpc_host "%s", rpc_port: "%d", being served on port "%d".' % (RPC_HOST, RPC_PORT, SERVER_PORT))

# All JSON RPC methods
# from https://github.com/spesmilo/electrumx/blob/master/docs/protocol-methods.rst
#
# blockchain.block.header(height, cp_height=0)
# blockchain.block.headers(start_height, count, cp_height=0)
# blockchain.estimatefee(number)
# blockchain.headers.subscribe()
# blockchain.headers.subscribe(header)
# blockchain.relayfee()
# blockchain.scripthash.get_balance(scripthash)
# blockchain.scripthash.get_history(scripthash)
# blockchain.scripthash.get_mempool(scripthash)
# blockchain.scripthash.listunspent(scripthash)
# blockchain.scripthash.subscribe(scripthash)
# blockchain.scripthash.subscribe(scripthash, status)
# blockchain.scripthash.unsubscribe(scripthash)
# blockchain.transaction.broadcast(raw_tx)
# blockchain.transaction.get(tx_hash, verbose=false)
# blockchain.transaction.get_merkle(tx_hash, height)
# blockchain.transaction.id_from_pos(height, tx_pos, merkle=false)
# mempool.get_fee_histogram()
# server.add_peer(features)
# server.banner()
# server.donation_address()
# server.features()
# server.peers.subscribe()
# server.ping()
# server.version(client_name="", protocol_version="1.4")
# masternode.announce.broadcast(signmnb)
# masternode.subscribe(collateral)
# masternode.list(payees)
# protx.diff(base_height, height)
# protx.info(protx_hash)

ALLOWED = [
    'blockchain.block.header', 
    'blockchain.block.headers', 
    'blockchain.estimatefee', 
    'blockchain.headers.subscribe', 
    'blockchain.relayfee', 
    'blockchain.scripthash.get_balance', 
    'blockchain.scripthash.get_history', 
    'blockchain.scripthash.get_mempool', 
    'blockchain.scripthash.listunspent', 
    'blockchain.scripthash.subscribe', 
    'blockchain.scripthash.unsubscribe', 
    'blockchain.transaction.broadcast', 
    'blockchain.transaction.get', 
    'blockchain.transaction.get_merkle', 
    'blockchain.transaction.id_from_pos', 
    'mempool.get_fee_histogram', 
    'server.add_peer', 
    'server.banner', 
    'server.donation_address', 
    'server.features', 
    'server.peers.subscribe', 
    'server.ping', 
    'server.version', 
    'masternode.announce.broadcast', 
    'masternode.subscribe', 
    'masternode.list', 
    'protx.diff', 
    'protx.info'
]

def is_json(myjson):
    try:
        json_object = json.loads(myjson)
    except ValueError:
        return False
    return True


def dead_response(code=-32600, message="Invalid Request", rid=API_ID):
    return {"jsonrpc": "2.0", "error": {"code": code, "message": message}, "id": rid}


def handle_rpc(data, ispost=False):
    result = {
        "jsonrpc": "2.0",
        "params": [],
        "id": API_ID
    }

    boolConvert = { 
         "True": True,
         "true": True,
         "False": False,
         "false": False
    }

    error = False
    blank = False
    error_message = ""
    error_code = 0
    method = ""
    rid = ""

    try:
        if ispost and data["jsonrpc"] != "2.0":
            error = True
            error_message = "Invalid Request"
            error_code = -32600

        if "method" not in data:
            blank = True
        else:
            method = data["method"] if ispost else data["method"][0]
            if method not in ALLOWED:
                error = True
                error_message = "Method not found"
                error_code = -32601

        if "params[]" in data:
            data["params"] = data["params[]"]
            data.pop("params[]", None)

        if "params" not in data:
            data["params"] = []


        # convert string booleans to true Booleans
        data["params"] = [ boolConvert.get( x, x ) for x in data["params"] ]

        if "id" in data:
            rid = data["id"] if ispost else data["id"][0]
            if type(rid) is str or type(rid) is int:
                result["id"] = rid

        if error is True:
            result["error"] = {
                "code": error_code,
                "message": error_message
            }
        else:
            if blank:
                result["method"] = "server.version"
            else:
                result["method"] = method
                if "params" in data:
                    result["params"] = data["params"]

    except:
        result = dead_response(-32700, "Parse error")

    return result


def create_rpc(result_data, rpc_id):
    result = {
        "jsonrpc": "2.0",
        "id": rpc_id
    }

    error = False
    error_message = ""
    error_code = 0
    length = 0

    try:
        length = len(re.findall(r'^[a-fA-F0-9]+$', result_data))
    except Exception as e:
        pass

    try:
        if type(result_data) == list or type(result_data) == dict or length > 0:
            data = result_data
        else:
            error = True
            error_message = "Invalid Request: {}".format(result_data)
            error_code = -32600

        if error is True:
            result["error"] = {
                "code": error_code,
                "message": error_message
            }
        else:
            result["result"] = data

    except Exception as e:
        result = dead_response(-32700, "Parse error")

    return result


class RpcServer(HTTPMethodView):
    async def send_request(self, request_self, method, params, rid):
        async with timeout_after(60):
            async with connect_rs(RPC_HOST, RPC_PORT) as session:
               session.transport._framer.max_size = 0
               try:
                   response = await session.send_request(method, params)
               except Exception as e:
                   response = e

            return create_rpc(response, rid)


    async def get(self, request):
        data = handle_rpc(parse.parse_qs(request.query_string))

        if "error" not in data:
            try:
                result = await self.send_request(self, data["method"], data["params"], data["id"])
                return sanic_json(result)
            except OSError:
                print('RPCD [GET]: cannot connect - is ElectrumX catching up, not running, or '
                      f'is {RPC_PORT} the wrong RPC port?')
            except Exception as e:
                print(f'RPCD [GET]: error making request: {e}')

        else:
            return sanic_json(dead_response())


    async def post(self, request):
        if is_json(request.body):
            data = handle_rpc(request.json, True)
        else:
            data = handle_rpc(request.form)

        if "error" not in data:
            try:
                result = await self.send_request(self, data["method"], data["params"], data["id"])
                return sanic_json(result)
            except OSError:
                print('RPCD [POST]: cannot connect - is ElectrumX catching up, not running, or '
                      f'is {RPC_PORT} the wrong RPC port?')
            except Exception as e:
                print(f'RPCD [POST]: error making request: {e}')

        else:
            return sanic_json(dead_response())


def run(server_port=SERVER_PORT):
    app = Sanic(name='Electrum REST API')
    CORS(app)

    app.add_route(RpcServer.as_view(), '/')
    app.run(host='0.0.0.0', port=server_port)


if __name__ == '__main__':
    from sys import argv

    if len(argv) == 2:
        run(int(argv[1]))
    else:
        run()
